{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UpdateHub documentation \u00b6 This document intends to assist you to understand how the UpdateHub works. Some of aspects covered on this documentation are: We present our tool, as well as the supported platforms, information about the available features and more in What is UpdateHub Are you curious about UpdateHub features? Quick starting with Raspberry Pi 3 it is a quick step-by-step that shows how easy it is to work with it In UpdateHub Cloud we will talk about the characteristics of UpdateHub Cloud service. This is an especially important section for understanding how the tool works and what it provides We describe the workflows that should be used to add UpdateHub support on a new, or existing, platform using Yocto Project at Yocto Project guide We also have at your disposal, the Yocto Project reference and Glossary of variables sessions, for more detailed information about internal processes. Please take a look at our FAQ as maybe it has the answer for the questions you may have or send us your question directly via Gitter . Our support team is always happy to support you in case you did not find the information you are after, or if you have critics or suggestions for the UpdateHub . Please get in touch with us at contact@updatehub.io. Syntax used on this documentation \u00b6 We adopted the following syntax across the whole documentation. On text, we use different formats as: bold - implies technologies and enterprises name. italic - is used on variables, artefacts, dashboard options, system path and configurations, layers and file names. Code - this format is used on code samples throughout the documentation. Besides this formats, we also use boxes to provite tips, warnings and important aspects to consider. For example: Information Info box provides additional information on what was recently covered. Tip Tip is advice on ways to make an operation easier. Important Here are informations that can directly influence the user and their interactions with our product, for example, the need do upgrade the account to support more than 5 devices. Attention In this type of box we find alerts about system configurations and behaviors, such as having to check the SD card before recording an image, for example.","title":"Introduction"},{"location":"#updatehub-documentation","text":"This document intends to assist you to understand how the UpdateHub works. Some of aspects covered on this documentation are: We present our tool, as well as the supported platforms, information about the available features and more in What is UpdateHub Are you curious about UpdateHub features? Quick starting with Raspberry Pi 3 it is a quick step-by-step that shows how easy it is to work with it In UpdateHub Cloud we will talk about the characteristics of UpdateHub Cloud service. This is an especially important section for understanding how the tool works and what it provides We describe the workflows that should be used to add UpdateHub support on a new, or existing, platform using Yocto Project at Yocto Project guide We also have at your disposal, the Yocto Project reference and Glossary of variables sessions, for more detailed information about internal processes. Please take a look at our FAQ as maybe it has the answer for the questions you may have or send us your question directly via Gitter . Our support team is always happy to support you in case you did not find the information you are after, or if you have critics or suggestions for the UpdateHub . Please get in touch with us at contact@updatehub.io.","title":"UpdateHub documentation"},{"location":"#syntax-used-on-this-documentation","text":"We adopted the following syntax across the whole documentation. On text, we use different formats as: bold - implies technologies and enterprises name. italic - is used on variables, artefacts, dashboard options, system path and configurations, layers and file names. Code - this format is used on code samples throughout the documentation. Besides this formats, we also use boxes to provite tips, warnings and important aspects to consider. For example: Information Info box provides additional information on what was recently covered. Tip Tip is advice on ways to make an operation easier. Important Here are informations that can directly influence the user and their interactions with our product, for example, the need do upgrade the account to support more than 5 devices. Attention In this type of box we find alerts about system configurations and behaviors, such as having to check the SD card before recording an image, for example.","title":"Syntax used on this documentation"},{"location":"quick-starting-with-raspberrypi3/","text":"Quick starting with RaspberryPi 3 \u00b6 In this step-by-step we show how easily you can generate a Linux image, that has UpdateHub support, using Yocto Project in a Raspberry Pi 3 development board. So you can get to know UpdateHub in a practical way and see how simple it is to keep your devices updated in the field using a secure way of communication. We assume that you have previous experience with the Yocto Project, know the main terms and have already created an image using it. If you are new to this tutorial , you can use it. What You Will Need \u00b6 To follow this guide, you will need the following: A Raspberry Pi 3 Model B or B+ An 4 GB or larger micro SD card An Ethernet cable for wired connectivity to the internet An UpdateHub account to access the hosted server An UpdateHub account allows manager even 5 devices; for more support and features is advisable migrate your plan . Step guide \u00b6 In order to generate an image that connects a device to the UpdateHub Cloud , we will first have to prepare the Yocto Project environment with the basic layers to generate an image with support for UpdateHub. In addition to the layers, you will need to configure some variables that are generated on the Dashboard. The first is the product identifier to which the device and the image will be connected. Then we will have to generate an access key in Settings that will authenticate the device when it accesses the server. At this point, we check the local.conf file to verify that everything is correct and build the image . That's it! Now just flash the image on the device and it is prepared with OTA support. Additionally we update the image by adding ssh support and we send the updated image to UpdateHub Cloud and show how simple an update of your device is with the create a rollout . First step: preparing the Yocto Project environment \u00b6 The first step is to initialize the environment to build a Linux image using Yocto Project and for that we need to fetch all the needed layers, that includes the main OE-Core layers, the BSP layer that adds support to Raspberry Pi and the layers that add support to UpdateHub . To get the platform you need to have Repo (a tool for manager git repositories) installed: For Debian/Ubuntu based distros run: sudo apt-get install repo For others distros, check the distro documentation or install repo manually: mkdir -p ~/.bin PATH=\"${HOME}/.bin:${PATH}\" curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo chmod a+rx ~/.bin/repo To download the platform source, that will download all layers: mkdir updatehub-get-started cd updatehub-get-started repo init -u https://github.com/fbertux/updatehub-yocto-project-get-started.git repo sync Setup the environment with: source ./setup-environment build At the end of the commands you have all metadata you need to start to work. Second step: creating a product \u00b6 One of the variables needed to generate the image is the product identifier that is generated when creating a Product . To create a Product just go to Dashboard and click on Add product . By doing that the following dialog will be displayed. You should choose a Product name and in Owner choose Me . About the name and owner Bear in the mind that after you create a Product you can not renamed or deleted it, and you can not transfer it to a organization or vice versa, so have sure you are choosing the correct name and the owner. After the Product has been created a Unique Identifier Number ( UPDATEHUB_PRODUCT_UID ) is generated to identify it. This number, should be added to your build in order to allow the UpdateHub agent, which runs inside the target device, to communicate with the UpdateHub Cloud . For convenience, you can add the UPDATEHUB_PRODUCT_UID to your build/conf/local.conf configuration file when prototyping. However, as this is a information that will be permanent for the whole product life cycle, it should be put inside your distribution configuration file, or image recipe. In case you didn't copy the Product Unique Identifier Number in the moment that you create it on the UpdateHub Cloud don't worry. To get access to this information again you must click on the Product icon and the Unique Identifier Number will be shown to you. Once you have logged in, the Products page will display the list of your own products and the other products you have access to. Third step: generating an Access Key \u00b6 To authenticate and authorize requests for a project build with the UpdateHub Cloud you must have a security credential in the form of an application access key. Each access key is specific to your user and is used to upload the packages update or any other external integration which needs to access the UpdateHub API. In order to generate an Access Key you must enter the Settings menu and click on the + Request Access Key button. Choose a name for the key and select the API Key owner as Me . Once the Access Key is created a dialog will appear to show the security credentials. Save your keys On the moment that this window is closed the keys will not be shown again and if you lose them you must revoke the Access Key and generate a new one. Include these variables in build/conf/local.conf : UPDATEHUB_ACCESS_ID = \"your-email@gmail.com-8bc21121049af...\" UPDATEHUB_ACCESS_SECRET = \"9b1fcee96795fa5dea5cd04cb1d2...\" Fourth step: Configuring the local.conf file \u00b6 Come back in Yocto Project directory in your computer. After fetching the bitbake layers is important to change some variables in the local.conf file. Here we'll put the variables that were generated before: UPDATEHUB_PRODUCT_UID from the Product and the UPDATEHUB_ACCESS_ID and UPDATEHUB_ACCESS_SECRET generated in Settings . UPDATEHUB_PRODUCT_UID = \"05344b71c3e9f8...\" UPDATEHUB_ACCESS_ID = \"your-email@gmail.com-8bc21121049af...\" UPDATEHUB_ACCESS_SECRET = \"9b1fcee96795fa5dea5cd04cb1d2...\" UPDATEHUB_PACKAGE_VERSION_SUFFIX is used to add a suffix in the version of the image being generated. This is useful for placing a version number and incrementing with each new image. UPDATEHUB_PACKAGE_VERSION_SUFFIX =\"-test-image-1.0\" Finally the final of your local.conf file should seem like this. UPDATEHUB_PRODUCT_UID = \"05344b71c3e9f8...\" UPDATEHUB_ACCESS_ID = \"your-email@gmail.com-8bc21121049af...\" UPDATEHUB_ACCESS_SECRET = \"9b1fcee96795fa5dea5cd04cb1d2...\" UPDATEHUB_PACKAGE_VERSION_SUFFIX = \"-test-image-1.0\" Fifth step: building an image \u00b6 With all variables configured, now we can generate our image: Open a terminal, go to your build directory and type: bitbake updatehub-image-base The generate image process can take a good time, it is dependent directly of the host resources. Now it's time to flash the image in the SD card. Then in a terminal go to this directory: build/tmp/deploy/images/raspberrypi3/ and type this: Check the name of the SD card before executing the command below! You can check the device name that correspond to SD card using command dmesg zcat updatehub-image-base-raspberrypi3.wic.gz | sudo dd of=/dev/sdX With the SD card ready, you can insert it into the target and connect it to RaspberryPi . The image is configured to obtain an IP address using DHCP. To access the console, the user is set to root\u201d and doesn't need to enter a password, just hit Enter . You can confirm the version of the image that is running on the target with the command: cat /etc/os-release You will see the version that you put in the local.conf file. O.S. Systems Embedded Linux 19.10 raspberrypi3 ttyS0 root@raspberrypi3:~# cat /etc/os-release ID=\"oel\" NAME=\"O.S. Systems Embedded Linux\" VERSION=\"19.10\" VERSION_ID=\"19.10-test-image-1.0\" PRETTY_NAME=\"O.S. Systems Embedded Linux 19.10\" UPDATEHUB_PRODUCT_UID=\"05344b71c3e9f8...\"\" root@raspberrypi3:~# Sixth step: changing the image \u00b6 Now that the whole upgrade process has been explained, we'll add support for an SSH server on the target and create an update package to install this functionality. To add support for the SSH OpenSSH server add the following line to the conf/local.conf file: IMAGE_FEATURES += \"ssh-server-openssh\" And change the variable UPDATEHUB_PACKAGE_VERSION_SUFFIX to use version of our test image: UPDATEHUB_PACKAGE_VERSION_SUFFIX = \"-test-image-2.0\" Seventh step: sending a new image version \u00b6 We can save the file, generate a new update package, and send the new file to UpdateHub Cloud by running the same command: bitbake updatehub-image-base -c uhupush After sending, the package will be available on the Dashboard in the Package section of the corresponding Product page. Eighth step: creating a rollout \u00b6 Rollout is the process of sending an updated image to devices in the field through UpdateHub Cloud . To create a rollout we have to access the dashboard , access the Product card we created before, and then click on Create rollout . In the displayed window choose the available version and click on Save and start . The status of the update process is shown in the displayed window, and can also be followed by the Devices section for each device individually. When the status shows updated, we can access the target using the SSH protocol, for this type in the host: ssh root@TARGET_IP_ADDR No password is required, just hit Enter and we will be in the target console. Again we can check the version with the contents of the /etc/os-release file. Here we finish our quick start, but we invite you to learn more about UpdateHub in the rest of the documentation. If you have encountered difficulties or have any questions or suggestions, please contact us through the Gitter or send us an email by contact@updatehub.io.","title":"Quick starting with Raspberry Pi 3"},{"location":"quick-starting-with-raspberrypi3/#quick-starting-with-raspberrypi-3","text":"In this step-by-step we show how easily you can generate a Linux image, that has UpdateHub support, using Yocto Project in a Raspberry Pi 3 development board. So you can get to know UpdateHub in a practical way and see how simple it is to keep your devices updated in the field using a secure way of communication. We assume that you have previous experience with the Yocto Project, know the main terms and have already created an image using it. If you are new to this tutorial , you can use it.","title":"Quick starting with RaspberryPi 3"},{"location":"quick-starting-with-raspberrypi3/#what-you-will-need","text":"To follow this guide, you will need the following: A Raspberry Pi 3 Model B or B+ An 4 GB or larger micro SD card An Ethernet cable for wired connectivity to the internet An UpdateHub account to access the hosted server An UpdateHub account allows manager even 5 devices; for more support and features is advisable migrate your plan .","title":"What You Will Need"},{"location":"quick-starting-with-raspberrypi3/#step-guide","text":"In order to generate an image that connects a device to the UpdateHub Cloud , we will first have to prepare the Yocto Project environment with the basic layers to generate an image with support for UpdateHub. In addition to the layers, you will need to configure some variables that are generated on the Dashboard. The first is the product identifier to which the device and the image will be connected. Then we will have to generate an access key in Settings that will authenticate the device when it accesses the server. At this point, we check the local.conf file to verify that everything is correct and build the image . That's it! Now just flash the image on the device and it is prepared with OTA support. Additionally we update the image by adding ssh support and we send the updated image to UpdateHub Cloud and show how simple an update of your device is with the create a rollout .","title":"Step guide"},{"location":"quick-starting-with-raspberrypi3/#first-step-preparing-the-yocto-project-environment","text":"The first step is to initialize the environment to build a Linux image using Yocto Project and for that we need to fetch all the needed layers, that includes the main OE-Core layers, the BSP layer that adds support to Raspberry Pi and the layers that add support to UpdateHub . To get the platform you need to have Repo (a tool for manager git repositories) installed: For Debian/Ubuntu based distros run: sudo apt-get install repo For others distros, check the distro documentation or install repo manually: mkdir -p ~/.bin PATH=\"${HOME}/.bin:${PATH}\" curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo chmod a+rx ~/.bin/repo To download the platform source, that will download all layers: mkdir updatehub-get-started cd updatehub-get-started repo init -u https://github.com/fbertux/updatehub-yocto-project-get-started.git repo sync Setup the environment with: source ./setup-environment build At the end of the commands you have all metadata you need to start to work.","title":"First step: preparing the Yocto Project environment"},{"location":"quick-starting-with-raspberrypi3/#second-step-creating-a-product","text":"One of the variables needed to generate the image is the product identifier that is generated when creating a Product . To create a Product just go to Dashboard and click on Add product . By doing that the following dialog will be displayed. You should choose a Product name and in Owner choose Me . About the name and owner Bear in the mind that after you create a Product you can not renamed or deleted it, and you can not transfer it to a organization or vice versa, so have sure you are choosing the correct name and the owner. After the Product has been created a Unique Identifier Number ( UPDATEHUB_PRODUCT_UID ) is generated to identify it. This number, should be added to your build in order to allow the UpdateHub agent, which runs inside the target device, to communicate with the UpdateHub Cloud . For convenience, you can add the UPDATEHUB_PRODUCT_UID to your build/conf/local.conf configuration file when prototyping. However, as this is a information that will be permanent for the whole product life cycle, it should be put inside your distribution configuration file, or image recipe. In case you didn't copy the Product Unique Identifier Number in the moment that you create it on the UpdateHub Cloud don't worry. To get access to this information again you must click on the Product icon and the Unique Identifier Number will be shown to you. Once you have logged in, the Products page will display the list of your own products and the other products you have access to.","title":"Second step: creating a product"},{"location":"quick-starting-with-raspberrypi3/#third-step-generating-an-access-key","text":"To authenticate and authorize requests for a project build with the UpdateHub Cloud you must have a security credential in the form of an application access key. Each access key is specific to your user and is used to upload the packages update or any other external integration which needs to access the UpdateHub API. In order to generate an Access Key you must enter the Settings menu and click on the + Request Access Key button. Choose a name for the key and select the API Key owner as Me . Once the Access Key is created a dialog will appear to show the security credentials. Save your keys On the moment that this window is closed the keys will not be shown again and if you lose them you must revoke the Access Key and generate a new one. Include these variables in build/conf/local.conf : UPDATEHUB_ACCESS_ID = \"your-email@gmail.com-8bc21121049af...\" UPDATEHUB_ACCESS_SECRET = \"9b1fcee96795fa5dea5cd04cb1d2...\"","title":"Third step: generating an Access Key"},{"location":"quick-starting-with-raspberrypi3/#fourth-step-configuring-the-localconf-file","text":"Come back in Yocto Project directory in your computer. After fetching the bitbake layers is important to change some variables in the local.conf file. Here we'll put the variables that were generated before: UPDATEHUB_PRODUCT_UID from the Product and the UPDATEHUB_ACCESS_ID and UPDATEHUB_ACCESS_SECRET generated in Settings . UPDATEHUB_PRODUCT_UID = \"05344b71c3e9f8...\" UPDATEHUB_ACCESS_ID = \"your-email@gmail.com-8bc21121049af...\" UPDATEHUB_ACCESS_SECRET = \"9b1fcee96795fa5dea5cd04cb1d2...\" UPDATEHUB_PACKAGE_VERSION_SUFFIX is used to add a suffix in the version of the image being generated. This is useful for placing a version number and incrementing with each new image. UPDATEHUB_PACKAGE_VERSION_SUFFIX =\"-test-image-1.0\" Finally the final of your local.conf file should seem like this. UPDATEHUB_PRODUCT_UID = \"05344b71c3e9f8...\" UPDATEHUB_ACCESS_ID = \"your-email@gmail.com-8bc21121049af...\" UPDATEHUB_ACCESS_SECRET = \"9b1fcee96795fa5dea5cd04cb1d2...\" UPDATEHUB_PACKAGE_VERSION_SUFFIX = \"-test-image-1.0\"","title":"Fourth step: Configuring the local.conf file"},{"location":"quick-starting-with-raspberrypi3/#fifth-step-building-an-image","text":"With all variables configured, now we can generate our image: Open a terminal, go to your build directory and type: bitbake updatehub-image-base The generate image process can take a good time, it is dependent directly of the host resources. Now it's time to flash the image in the SD card. Then in a terminal go to this directory: build/tmp/deploy/images/raspberrypi3/ and type this: Check the name of the SD card before executing the command below! You can check the device name that correspond to SD card using command dmesg zcat updatehub-image-base-raspberrypi3.wic.gz | sudo dd of=/dev/sdX With the SD card ready, you can insert it into the target and connect it to RaspberryPi . The image is configured to obtain an IP address using DHCP. To access the console, the user is set to root\u201d and doesn't need to enter a password, just hit Enter . You can confirm the version of the image that is running on the target with the command: cat /etc/os-release You will see the version that you put in the local.conf file. O.S. Systems Embedded Linux 19.10 raspberrypi3 ttyS0 root@raspberrypi3:~# cat /etc/os-release ID=\"oel\" NAME=\"O.S. Systems Embedded Linux\" VERSION=\"19.10\" VERSION_ID=\"19.10-test-image-1.0\" PRETTY_NAME=\"O.S. Systems Embedded Linux 19.10\" UPDATEHUB_PRODUCT_UID=\"05344b71c3e9f8...\"\" root@raspberrypi3:~#","title":"Fifth step: building an image"},{"location":"quick-starting-with-raspberrypi3/#sixth-step-changing-the-image","text":"Now that the whole upgrade process has been explained, we'll add support for an SSH server on the target and create an update package to install this functionality. To add support for the SSH OpenSSH server add the following line to the conf/local.conf file: IMAGE_FEATURES += \"ssh-server-openssh\" And change the variable UPDATEHUB_PACKAGE_VERSION_SUFFIX to use version of our test image: UPDATEHUB_PACKAGE_VERSION_SUFFIX = \"-test-image-2.0\"","title":"Sixth step: changing the image"},{"location":"quick-starting-with-raspberrypi3/#seventh-step-sending-a-new-image-version","text":"We can save the file, generate a new update package, and send the new file to UpdateHub Cloud by running the same command: bitbake updatehub-image-base -c uhupush After sending, the package will be available on the Dashboard in the Package section of the corresponding Product page.","title":"Seventh step: sending a new image version"},{"location":"quick-starting-with-raspberrypi3/#eighth-step-creating-a-rollout","text":"Rollout is the process of sending an updated image to devices in the field through UpdateHub Cloud . To create a rollout we have to access the dashboard , access the Product card we created before, and then click on Create rollout . In the displayed window choose the available version and click on Save and start . The status of the update process is shown in the displayed window, and can also be followed by the Devices section for each device individually. When the status shows updated, we can access the target using the SSH protocol, for this type in the host: ssh root@TARGET_IP_ADDR No password is required, just hit Enter and we will be in the target console. Again we can check the version with the contents of the /etc/os-release file. Here we finish our quick start, but we invite you to learn more about UpdateHub in the rest of the documentation. If you have encountered difficulties or have any questions or suggestions, please contact us through the Gitter or send us an email by contact@updatehub.io.","title":"Eighth step: creating a rollout"},{"location":"what-is-updatehub/","text":"What is UpdateHub? \u00b6 UpdateHub is an enterprise-grade solution which makes simple to remotely update all your embedded devices in the field. It handles all aspects related to sending Firmware Over-the-Air (FOTA) updates with maximum security and efficiency, making your project the center of your attention. Supported Platforms \u00b6 To maximize the diverity of projects which can benefit of UpdateHub use, we provide support for Yocto Project\u2122 and Zephyr Project\u2122 based devices, encompassing Linux and RTOS based devices. Basic Concepts \u00b6 There are few basic concepts that are important to understand the UpdateHub . Those basic concepts are detailed below: Product: is the base that connects everything together through the UpdateHub . Essentially the Product includes one or multiple Devices , and for each of them there is a Package version that may be updated using a Rollout Device: it represents your physical device. It has multiple characteristics which are tracked on the management platform, as such: hardware type, unique identifier, runtime attributes and more Package: encompases a software version, including the filesystem image, bootloader or any other objects Rollout: it is essentially a deployment plan. It can be simple as \"send version 2.0 for all devices\" or a more complex plan, selecting specific filters and enforcing a gradual deployment across the devices in the field Rollback: this allows to roll back to the previous working version if a new version has critical errors, ensuring that the device will continue to function after the upgrade Features \u00b6 The UpdateHub has a rich features set. On the management platform side it offers support for: Single and team managed products 2-click rollout creation for fast deployment across all your devices Multi-step rollout support for finner control about the rollout process across your devices (e.g: lab, alpha testers, production) HTTP API to control the system remotely The support provided by the UpdateHub for the device includes: Support for multiple Yocto Project\u2122 and Zephyr Project\u2122 versions Bootloader upgrade support (U-Boot and GRUB) Flash support (NAND, NOR) UBIFS support Automated rollback in case of update fail Conditional installation (content, version and custom pattern support) Callback support for every update step HTTP API to control and inquiry the local agent UpdateHub Server Editions \u00b6 UpdateHub Server is available in two editions: UpdateHub Community Edition : is ideal for individual developers and small teams looking to get started with UpdateHub and experimenting with Firmware Over-the-Air (FOTA) updates. UpdateHub Cloud : is designed for enterprise development and IT teams who needs a end-to-end solution to build and ship Firmware Over-the-Air (FOTA) updates with maximum security and efficiency at any scale. UpdateHub Cloud \u00b6 UpdateHub Cloud have a rich but simple interface with all the tools required to: Create and operate your own Products Access Products from organizations Check when new Packages are available for updates Oversee a fleet of Devices on the field Deploy updates via an Over-The-Air system running the Rollouts In essence the UpdateHub Cloud allows the oversight over the whole UpdateHub plataform and operations, making it easy to manage any need that you might have. Comparasion Table \u00b6 See the comparison table below to help you to choose which version fits you need: Feature UpdateHub CE UpdateHub Cloud Secure communication (HTTPS, CoAP over DTLS) \u2718 \u2714 Signed packages \u2714 \u2714 Rollouts \u2714 \u2714 Large scale rollouts \u2718 \u2714 Multiple organizations \u2718 \u2714 Fully monitored updates \u2714 \u2714 Teams \u2718 \u2714 HTTP API \u2718 \u2714 Package upload \u2714 \u2714 Multiple products \u2718 \u2714 Advanced device filter \u2718 \u2714 Multiple users \u2718 \u2714","title":"What is UpdateHub"},{"location":"what-is-updatehub/#what-is-updatehub","text":"UpdateHub is an enterprise-grade solution which makes simple to remotely update all your embedded devices in the field. It handles all aspects related to sending Firmware Over-the-Air (FOTA) updates with maximum security and efficiency, making your project the center of your attention.","title":"What is UpdateHub?"},{"location":"what-is-updatehub/#supported-platforms","text":"To maximize the diverity of projects which can benefit of UpdateHub use, we provide support for Yocto Project\u2122 and Zephyr Project\u2122 based devices, encompassing Linux and RTOS based devices.","title":"Supported Platforms"},{"location":"what-is-updatehub/#basic-concepts","text":"There are few basic concepts that are important to understand the UpdateHub . Those basic concepts are detailed below: Product: is the base that connects everything together through the UpdateHub . Essentially the Product includes one or multiple Devices , and for each of them there is a Package version that may be updated using a Rollout Device: it represents your physical device. It has multiple characteristics which are tracked on the management platform, as such: hardware type, unique identifier, runtime attributes and more Package: encompases a software version, including the filesystem image, bootloader or any other objects Rollout: it is essentially a deployment plan. It can be simple as \"send version 2.0 for all devices\" or a more complex plan, selecting specific filters and enforcing a gradual deployment across the devices in the field Rollback: this allows to roll back to the previous working version if a new version has critical errors, ensuring that the device will continue to function after the upgrade","title":"Basic Concepts"},{"location":"what-is-updatehub/#features","text":"The UpdateHub has a rich features set. On the management platform side it offers support for: Single and team managed products 2-click rollout creation for fast deployment across all your devices Multi-step rollout support for finner control about the rollout process across your devices (e.g: lab, alpha testers, production) HTTP API to control the system remotely The support provided by the UpdateHub for the device includes: Support for multiple Yocto Project\u2122 and Zephyr Project\u2122 versions Bootloader upgrade support (U-Boot and GRUB) Flash support (NAND, NOR) UBIFS support Automated rollback in case of update fail Conditional installation (content, version and custom pattern support) Callback support for every update step HTTP API to control and inquiry the local agent","title":"Features"},{"location":"what-is-updatehub/#updatehub-server-editions","text":"UpdateHub Server is available in two editions: UpdateHub Community Edition : is ideal for individual developers and small teams looking to get started with UpdateHub and experimenting with Firmware Over-the-Air (FOTA) updates. UpdateHub Cloud : is designed for enterprise development and IT teams who needs a end-to-end solution to build and ship Firmware Over-the-Air (FOTA) updates with maximum security and efficiency at any scale.","title":"UpdateHub Server Editions"},{"location":"what-is-updatehub/#updatehub-cloud","text":"UpdateHub Cloud have a rich but simple interface with all the tools required to: Create and operate your own Products Access Products from organizations Check when new Packages are available for updates Oversee a fleet of Devices on the field Deploy updates via an Over-The-Air system running the Rollouts In essence the UpdateHub Cloud allows the oversight over the whole UpdateHub plataform and operations, making it easy to manage any need that you might have.","title":"UpdateHub Cloud"},{"location":"what-is-updatehub/#comparasion-table","text":"See the comparison table below to help you to choose which version fits you need: Feature UpdateHub CE UpdateHub Cloud Secure communication (HTTPS, CoAP over DTLS) \u2718 \u2714 Signed packages \u2714 \u2714 Rollouts \u2714 \u2714 Large scale rollouts \u2718 \u2714 Multiple organizations \u2718 \u2714 Fully monitored updates \u2714 \u2714 Teams \u2718 \u2714 HTTP API \u2718 \u2714 Package upload \u2714 \u2714 Multiple products \u2718 \u2714 Advanced device filter \u2718 \u2714 Multiple users \u2718 \u2714","title":"Comparasion Table"},{"location":"faq/faq-questions/","text":"Frequently Asked Questions \u00b6 Can I deleted a product from my UpdateHub?","title":"FAQ"},{"location":"faq/faq-questions/#frequently-asked-questions","text":"Can I deleted a product from my UpdateHub?","title":"Frequently Asked Questions"},{"location":"faq/generating-RSA/","text":"Generating RSA Key \u00b6 The UpdateHub verifies the authenticity of every Package update prior applying it. To do so, it uses a RSA key that to check if the Package has not been modified or corrupted by any means. Each device will contain the public key, public_key.pem , included on the device image, which will validate any received Package before unpacking, which must have been signed with the private key, private_key.pem , when generating the update package. {% hint style='danger' %} Important : Once a device is deployed using a RSA key, the same key is used to validate every update package. It is important to keep the RSA keys safe or you'll not be able to send updates for those devices. {% endhint %} The generation of the RSA keys requires the openssl utility. The private RSA key is generated using the command below: $: mkdir -p ~/updatehub-keys $: openssl genpkey -algorithm RSA -out ~/updatehub-keys/private_key.pem -pkeyopt rsa_keygen_bits:4096 Next we need to extract the public RSA key from the private key. Use the following command: $: openssl rsa -pubout -in ~/updatehub-keys/private_key.pem -out ~/updatehub-keys/public_key.pem","title":"Generating RSA Key"},{"location":"faq/generating-RSA/#generating-rsa-key","text":"The UpdateHub verifies the authenticity of every Package update prior applying it. To do so, it uses a RSA key that to check if the Package has not been modified or corrupted by any means. Each device will contain the public key, public_key.pem , included on the device image, which will validate any received Package before unpacking, which must have been signed with the private key, private_key.pem , when generating the update package. {% hint style='danger' %} Important : Once a device is deployed using a RSA key, the same key is used to validate every update package. It is important to keep the RSA keys safe or you'll not be able to send updates for those devices. {% endhint %} The generation of the RSA keys requires the openssl utility. The private RSA key is generated using the command below: $: mkdir -p ~/updatehub-keys $: openssl genpkey -algorithm RSA -out ~/updatehub-keys/private_key.pem -pkeyopt rsa_keygen_bits:4096 Next we need to extract the public RSA key from the private key. Use the following command: $: openssl rsa -pubout -in ~/updatehub-keys/private_key.pem -out ~/updatehub-keys/public_key.pem","title":"Generating RSA Key"},{"location":"faq/answers/answers/","text":"answers \u00b6 Can I delete a product? No it is not possible because...","title":"answers"},{"location":"faq/answers/answers/#answers","text":"Can I delete a product? No it is not possible because...","title":"answers"},{"location":"updatehub-cloud/dashboard/","text":"Through the dashboard you, as the UpdateHub user , have a rich but simple interface with all the tools required to: Create and operate your own Products Access Products from the Organizations you have access Check when new Packages are available for updates Oversee a fleet of Devices on the field Deploy updates via an Over-The-Air using Rollouts Essentially, the dashboard allows the oversight over the whole UpdateHub platform and its operations, making it easy to manage any need that you might have. To access the Dashboard functions you need to be logged in your UpdateHub account .","title":"UpdateHub Cloud dashboard"},{"location":"updatehub-cloud/device/","text":"Handling a Device \u00b6 The Device is the system entity that stores the characteristics of a physical device. Through these characteristics, filters can be applied during a search or when performing a rollout. The Devices page displays the list of registered devices for the Product . In this session we will cover: Registering a device Listing all devices of a product Accessing the details of a device Rollout history of a device Checking out Registering a device \u00b6 A device that uses an image with the correct layers and a set of variables necessary to support UpdateHub will be automatically registered on the system when in activity, check the server for updates the first time. Besides UpdateHub keys, we can create a RSA Key for add security in comunication. Listing all devices of a product \u00b6 When you access the subsection Device within a Product , all devices registered for that product will be listed. UpdateHub also allows the use of filters, guaranteeing the user an excellent organizational capacity, even when managing a large number of devices at the same time. Accessing the details of a device \u00b6 When you click on one of the listed devices, the Device details page loads and will provide access to detailed information about a specific Device , such as: The Unique Identifier (UID) The device identity values (e.g. MAC* address, CPU serial number or other) Current installed package version Hardware model Device state (enabled or disabled) Device attributes Latest rollout update Rollout history of a device \u00b6 The Rollout history of the device allow an easy access to the current and previous device's update status, such as duration, logs about errors and date of the events. During a normal situation the device Rollout will be displayed showing the moment that started, going through all the process until the point that is finished, like in the image below: In the case of some kind of problem happens during the update process, the UpdateHub will provide a visual feedback of the moment it occurred. To examine the failure you need to select See Device Log . This data about the device ensures the user has all information needed for any upcoming situation, being capable of manage his devices within the entire Product lifetime. Checking out \u00b6 To check if the Rollout worked and the device is up to date you just need type in your device the command below. cat /etc/os-release And the version you use in Rollout will be shown.","title":"Handling a Device"},{"location":"updatehub-cloud/device/#handling-a-device","text":"The Device is the system entity that stores the characteristics of a physical device. Through these characteristics, filters can be applied during a search or when performing a rollout. The Devices page displays the list of registered devices for the Product . In this session we will cover: Registering a device Listing all devices of a product Accessing the details of a device Rollout history of a device Checking out","title":"Handling a Device"},{"location":"updatehub-cloud/device/#registering-a-device","text":"A device that uses an image with the correct layers and a set of variables necessary to support UpdateHub will be automatically registered on the system when in activity, check the server for updates the first time. Besides UpdateHub keys, we can create a RSA Key for add security in comunication.","title":"Registering a device"},{"location":"updatehub-cloud/device/#listing-all-devices-of-a-product","text":"When you access the subsection Device within a Product , all devices registered for that product will be listed. UpdateHub also allows the use of filters, guaranteeing the user an excellent organizational capacity, even when managing a large number of devices at the same time.","title":"Listing all devices of a product"},{"location":"updatehub-cloud/device/#accessing-the-details-of-a-device","text":"When you click on one of the listed devices, the Device details page loads and will provide access to detailed information about a specific Device , such as: The Unique Identifier (UID) The device identity values (e.g. MAC* address, CPU serial number or other) Current installed package version Hardware model Device state (enabled or disabled) Device attributes Latest rollout update","title":"Accessing the details of a device"},{"location":"updatehub-cloud/device/#rollout-history-of-a-device","text":"The Rollout history of the device allow an easy access to the current and previous device's update status, such as duration, logs about errors and date of the events. During a normal situation the device Rollout will be displayed showing the moment that started, going through all the process until the point that is finished, like in the image below: In the case of some kind of problem happens during the update process, the UpdateHub will provide a visual feedback of the moment it occurred. To examine the failure you need to select See Device Log . This data about the device ensures the user has all information needed for any upcoming situation, being capable of manage his devices within the entire Product lifetime.","title":"Rollout history of a device"},{"location":"updatehub-cloud/device/#checking-out","text":"To check if the Rollout worked and the device is up to date you just need type in your device the command below. cat /etc/os-release And the version you use in Rollout will be shown.","title":"Checking out"},{"location":"updatehub-cloud/menu/","text":"Your menu account \u00b6 In the menu we have your account information, access keys applicable to the configuration of UpdateHub on devices, organizations and billing. Your account menu is at the top right of the Dashboard . In this session we will cover: Acessing settings Account personal data Applications access Requesting a access key Organization Creating an Organization More about the Billing Acessing settings \u00b6 At the Settings menu you will find your information, and you will be able to manage your Account , the Aplication Access , as well as manage the Organizations you belongs to. Sign in your account and go to settings screen by clicking on the drop down menu on the right of your name and select Settings . Account personal data \u00b6 The account subsection shows your current data and allows you to edit them or add a new email. Applications access \u00b6 To authenticate and authorize requests for a project build with the UpdateHub you must have a security credential in the form of an application access key. Each access key is specific to your user and is used to upload the packages or any other external integration which needs to access the UpdateHub API. In this section all access keys for your account will be listed. Requesting a access key \u00b6 If you need to, you can create a new one by clicking the + Request Access Key button. Choose a name for the key and select the API Key owner as Me or a Organization . Once the access key is created a dialog will appear to show the security credentials. Save your keys On the moment that this window is closed the keys will not be shown again and if you lose them you must revoke the Access Key and generate a new one. Organization \u00b6 In addition to the Access Key created for the user to work individually, the UpdateHub grants the possibility of more than one user to have access to the same Product throught of an Organization . Creating an Organization \u00b6 Create an Organization is simple, as you just need to click on the + Create Organization button and select a name for it. You will be automatically be set as Owner . After the creation of an Organization invitations for new members can be easily sent. The invite must contain the user's e-mail and the level of access allowed to him. There are three users access levels inside the Organization , each one with a particular set of permissions: Owner - has all the permissions to normally create products, start rollouts and invite other members for the Organization Release Manager - limited to manage the rollouts Developer - has the permission to only create the packages Each Organization will display a list with all of its members, showing their name, e-mail address, access level of permission, and a list with all the pending invites waiting to be answered. More about the Billing \u00b6 The UpdateHub Cloud allows the registration of up to 5 devices in your account without any type of charge. Above this number, the server will not allow more devices to be registered in this account, which can generate an error when a device configured with UpdateHub support tries to access the server. To enable the support for more devices, you need to upgrade your account, accessing the Unlock Unlimited Usage at Billing and enter the requested data. The billing is split upon: My usage - about the products that the owner is the user of the account, that is, they were created by this account with the Owner as Me . My organizations - that is generated by products that belong to an organization created by the account user. Billing for an organization is generated in the Owner account for that organization, and each organization generates a separate billing. If you want more informations about values, Estimate your costs will help you.","title":"Your menu account"},{"location":"updatehub-cloud/menu/#your-menu-account","text":"In the menu we have your account information, access keys applicable to the configuration of UpdateHub on devices, organizations and billing. Your account menu is at the top right of the Dashboard . In this session we will cover: Acessing settings Account personal data Applications access Requesting a access key Organization Creating an Organization More about the Billing","title":"Your menu account"},{"location":"updatehub-cloud/menu/#acessing-settings","text":"At the Settings menu you will find your information, and you will be able to manage your Account , the Aplication Access , as well as manage the Organizations you belongs to. Sign in your account and go to settings screen by clicking on the drop down menu on the right of your name and select Settings .","title":"Acessing settings"},{"location":"updatehub-cloud/menu/#account-personal-data","text":"The account subsection shows your current data and allows you to edit them or add a new email.","title":"Account personal data"},{"location":"updatehub-cloud/menu/#applications-access","text":"To authenticate and authorize requests for a project build with the UpdateHub you must have a security credential in the form of an application access key. Each access key is specific to your user and is used to upload the packages or any other external integration which needs to access the UpdateHub API. In this section all access keys for your account will be listed.","title":"Applications access"},{"location":"updatehub-cloud/menu/#requesting-a-access-key","text":"If you need to, you can create a new one by clicking the + Request Access Key button. Choose a name for the key and select the API Key owner as Me or a Organization . Once the access key is created a dialog will appear to show the security credentials. Save your keys On the moment that this window is closed the keys will not be shown again and if you lose them you must revoke the Access Key and generate a new one.","title":"Requesting a access key"},{"location":"updatehub-cloud/menu/#organization","text":"In addition to the Access Key created for the user to work individually, the UpdateHub grants the possibility of more than one user to have access to the same Product throught of an Organization .","title":"Organization"},{"location":"updatehub-cloud/menu/#creating-an-organization","text":"Create an Organization is simple, as you just need to click on the + Create Organization button and select a name for it. You will be automatically be set as Owner . After the creation of an Organization invitations for new members can be easily sent. The invite must contain the user's e-mail and the level of access allowed to him. There are three users access levels inside the Organization , each one with a particular set of permissions: Owner - has all the permissions to normally create products, start rollouts and invite other members for the Organization Release Manager - limited to manage the rollouts Developer - has the permission to only create the packages Each Organization will display a list with all of its members, showing their name, e-mail address, access level of permission, and a list with all the pending invites waiting to be answered.","title":"Creating an Organization"},{"location":"updatehub-cloud/menu/#more-about-the-billing","text":"The UpdateHub Cloud allows the registration of up to 5 devices in your account without any type of charge. Above this number, the server will not allow more devices to be registered in this account, which can generate an error when a device configured with UpdateHub support tries to access the server. To enable the support for more devices, you need to upgrade your account, accessing the Unlock Unlimited Usage at Billing and enter the requested data. The billing is split upon: My usage - about the products that the owner is the user of the account, that is, they were created by this account with the Owner as Me . My organizations - that is generated by products that belong to an organization created by the account user. Billing for an organization is generated in the Owner account for that organization, and each organization generates a separate billing. If you want more informations about values, Estimate your costs will help you.","title":"More about the Billing"},{"location":"updatehub-cloud/package-rollout/","text":"As Package and Rollout are strictly linked, we chose to address both in a single section. In summary, we can say that a Rollout is the process of applying a Package to certain devices but in subsections below more detailed description is given. Manipulating a Package \u00b6 A Package is a update which will add or remove information to an image that is running on a device that is in the field. First, a modified image will be sent to the server with a specific command (see more in uhupkg) and then it is available in the Package subsection, becoming available to be selected in a new rollout. In dashboard, the Package is available after you join in a specific Product . In this session we will cover: Viewing the package list More informations about a package Viewing the package list \u00b6 The Packages page, in the same fashion as the Devices page, exhibit a list with information about the packages inside a specific Product the user selected, such as: Package Unique Identifier (UID) Version Supported hardware list Status Size Upload date Each one of these items help the user find a specific package. To filter more efficiently the packages you can select and associate them by the following items during the search: Status of each package can be found depending on the situation for the Rollout Available : the package is ready to be downloaded Upload in Progress : package during the uploaded process Removed : packages that were removed from the packages list Pending Progress : packages being checked by the server Packages with Error : packages that failed the system checksum Version for the package Supported hardware More informations about a package \u00b6 In the Package Details page the user may have a deeper look into a particular Package and its information. Beyond the information already present on the Package List , you will find more data about the Objects and their details which is used by the UpdateHub agent during the object's installation. Once you entered in the Package Details you have the option to remove the package from the Rollout if necessary by clicking on the trash can icon. The package will be visible and accessible but won't be available anymore. Administering a Rollout \u00b6 Rollout is the process of sending updates from the server to the devices registered in a certain product. To start a rollout, the update package must be sent to the server and then the process can be initiated by product * overview * or by the subsection rollout. In this session we will cover: Ways to create a rollout All devices Select the target devices Register of rollouts Detailing a rollout Ways to create a rollout \u00b6 There are two methods to execute the Rollout : the simpler way is update all the versions of the Devices present on the field at once; the other way is to selecting which Devices receives the update through Advanced Mode option. All devices \u00b6 To update all devices in the field to the same version you just need to go to the Overview or Rollouts page and click on Create Rollout . A box to choose the version will appear. After you make this choice just click on Save to initiate the Rollout later or Save and Start launch it straightaway. Select the target devices \u00b6 The other way is to select which equipment receives the * Rollout * is using the Advanced Mode option that allows the use of selection filters for devices. In advanced mode, you can create and name tasks that define the filters that will be applied, selecting which devices will receive the update. In addition to the available filters, UpdateHub provides Fault Tolerance , which is a percentage that can be set by the user to abort the Rollout automatically if the failure rate exceeds the specified limit. It is advised to use Fault Tolerance percentage because this is safe measure. The Devices can be filter by their Version, Hardware, Device Identifier (e.g: the MAC address) and Device Attributes (e.g: kernel version, device total memory). Finally Save the Rollout to start later or Save and Start it immediately. Register of rollouts \u00b6 The Rollout List exhibit every Rollouts available for the Product chosen and a brief information about them, such as name, version, creation, status and progress. Detailing a rollout \u00b6 The UpdateHub also gives all the information in details of each specific Rollout , allowing a complete overview of the individual process. Among the information displayed inside the Rollout Details you will find: Version : the version of Rollout that the Device will receive Creation Date : the date that the Rollout was created Tasks : this area shows the each task that is part of the Rollout . Each task includes a number of information, such as: Number of Devices : all the Devices available for the Rollout , including the number of process concluded, failed, and remaining in one or various tasks are displayed here Fault tolerance : that's the percentage limit of failures which can occur during the Rollout until the UpdateHub aborts the running rollout process, including any pending tasks Play/Pause Rollout : whenever the user wants to play or pause the Rollout the option is available, unless the process is aborted or the user chooses to archive it Archive the Rollout : once the rollout is not necessary anymore it can be archived and stopped definitely","title":"Package and Rollout"},{"location":"updatehub-cloud/package-rollout/#manipulating-a-package","text":"A Package is a update which will add or remove information to an image that is running on a device that is in the field. First, a modified image will be sent to the server with a specific command (see more in uhupkg) and then it is available in the Package subsection, becoming available to be selected in a new rollout. In dashboard, the Package is available after you join in a specific Product . In this session we will cover: Viewing the package list More informations about a package","title":"Manipulating a Package"},{"location":"updatehub-cloud/package-rollout/#viewing-the-package-list","text":"The Packages page, in the same fashion as the Devices page, exhibit a list with information about the packages inside a specific Product the user selected, such as: Package Unique Identifier (UID) Version Supported hardware list Status Size Upload date Each one of these items help the user find a specific package. To filter more efficiently the packages you can select and associate them by the following items during the search: Status of each package can be found depending on the situation for the Rollout Available : the package is ready to be downloaded Upload in Progress : package during the uploaded process Removed : packages that were removed from the packages list Pending Progress : packages being checked by the server Packages with Error : packages that failed the system checksum Version for the package Supported hardware","title":"Viewing the package list"},{"location":"updatehub-cloud/package-rollout/#more-informations-about-a-package","text":"In the Package Details page the user may have a deeper look into a particular Package and its information. Beyond the information already present on the Package List , you will find more data about the Objects and their details which is used by the UpdateHub agent during the object's installation. Once you entered in the Package Details you have the option to remove the package from the Rollout if necessary by clicking on the trash can icon. The package will be visible and accessible but won't be available anymore.","title":"More informations about a package"},{"location":"updatehub-cloud/package-rollout/#administering-a-rollout","text":"Rollout is the process of sending updates from the server to the devices registered in a certain product. To start a rollout, the update package must be sent to the server and then the process can be initiated by product * overview * or by the subsection rollout. In this session we will cover: Ways to create a rollout All devices Select the target devices Register of rollouts Detailing a rollout","title":"Administering a Rollout"},{"location":"updatehub-cloud/package-rollout/#ways-to-create-a-rollout","text":"There are two methods to execute the Rollout : the simpler way is update all the versions of the Devices present on the field at once; the other way is to selecting which Devices receives the update through Advanced Mode option.","title":"Ways to create a rollout"},{"location":"updatehub-cloud/package-rollout/#all-devices","text":"To update all devices in the field to the same version you just need to go to the Overview or Rollouts page and click on Create Rollout . A box to choose the version will appear. After you make this choice just click on Save to initiate the Rollout later or Save and Start launch it straightaway.","title":"All devices"},{"location":"updatehub-cloud/package-rollout/#select-the-target-devices","text":"The other way is to select which equipment receives the * Rollout * is using the Advanced Mode option that allows the use of selection filters for devices. In advanced mode, you can create and name tasks that define the filters that will be applied, selecting which devices will receive the update. In addition to the available filters, UpdateHub provides Fault Tolerance , which is a percentage that can be set by the user to abort the Rollout automatically if the failure rate exceeds the specified limit. It is advised to use Fault Tolerance percentage because this is safe measure. The Devices can be filter by their Version, Hardware, Device Identifier (e.g: the MAC address) and Device Attributes (e.g: kernel version, device total memory). Finally Save the Rollout to start later or Save and Start it immediately.","title":"Select the target devices"},{"location":"updatehub-cloud/package-rollout/#register-of-rollouts","text":"The Rollout List exhibit every Rollouts available for the Product chosen and a brief information about them, such as name, version, creation, status and progress.","title":"Register of rollouts"},{"location":"updatehub-cloud/package-rollout/#detailing-a-rollout","text":"The UpdateHub also gives all the information in details of each specific Rollout , allowing a complete overview of the individual process. Among the information displayed inside the Rollout Details you will find: Version : the version of Rollout that the Device will receive Creation Date : the date that the Rollout was created Tasks : this area shows the each task that is part of the Rollout . Each task includes a number of information, such as: Number of Devices : all the Devices available for the Rollout , including the number of process concluded, failed, and remaining in one or various tasks are displayed here Fault tolerance : that's the percentage limit of failures which can occur during the Rollout until the UpdateHub aborts the running rollout process, including any pending tasks Play/Pause Rollout : whenever the user wants to play or pause the Rollout the option is available, unless the process is aborted or the user chooses to archive it Archive the Rollout : once the rollout is not necessary anymore it can be archived and stopped definitely","title":"Detailing a rollout"},{"location":"updatehub-cloud/product/","text":"Managing a Product \u00b6 A product creation is the first step we need to do when starting to use the UpdateHub Cloud . It is required because every device, package or rollout need to be associated with a product. In this session we will cover: How to create a product Viewing the details of a product How to create a product \u00b6 To create a product just go to Add product through the initial page of the Dashboard . When you access the Dashboard home page, all of your created products will be displayed By doing that the following dialog will be displayed. Please choose a Product name and its Owner ( Me or a Organization ). Every organization that the user has access is available as the Owner of the product. Bear in mind that an Organization is a group of users and that it may own one or more products. Users which belongs to an organization may have different access levels to a given product. We will talk about Organization later. About the name and owner Bear in the mind that after you create a Product you can not renamed or deleted it, and you can not transfer it to a organization or vice versa, so be sure you are choosing the correct name and the owner. After the Product has been created a Unique Identifier Number ( UPDATEHUB_PRODUCT_UID ) is generated to identify it. This number should be added to your build in order to allow the UpdateHub agent, which runs inside the target device, to communicate with the UpdateHub Cloud . For convenience, you can add the UPDATEHUB_PRODUCT_UID to your build/conf/local.conf configuration file when prototyping. As this is a information that will be permanent for the whole product life cycle, it should be put inside your distribution configuration file or image recipe. After you press the OK button you will be into the Products screen where you can see all your Product , Rollouts , Devices and Packages . If you make changes in your product and send this changes to your UpdateHub the package will appear in the Package List . Viewing the details of a product \u00b6 When you access the Dashboard the Products you have created or have access to are displayed in a list. The page appears as shown below: Clicking on any product card, you will be taken to the Product Overview page. In this page you find useful information about the Product , as which Devices you have deployed on the field, the two last Packages sent for that particular Product and the Rollouts status. In case you didn't copy the Product Unique Identifier Number in the moment that you create it on the UpdateHub Cloud don't worry. To get access to this information again you must click on the Product icon and the Unique Identifier Number will be shown to you.","title":"Managing a Product"},{"location":"updatehub-cloud/product/#managing-a-product","text":"A product creation is the first step we need to do when starting to use the UpdateHub Cloud . It is required because every device, package or rollout need to be associated with a product. In this session we will cover: How to create a product Viewing the details of a product","title":"Managing a Product"},{"location":"updatehub-cloud/product/#how-to-create-a-product","text":"To create a product just go to Add product through the initial page of the Dashboard . When you access the Dashboard home page, all of your created products will be displayed By doing that the following dialog will be displayed. Please choose a Product name and its Owner ( Me or a Organization ). Every organization that the user has access is available as the Owner of the product. Bear in mind that an Organization is a group of users and that it may own one or more products. Users which belongs to an organization may have different access levels to a given product. We will talk about Organization later. About the name and owner Bear in the mind that after you create a Product you can not renamed or deleted it, and you can not transfer it to a organization or vice versa, so be sure you are choosing the correct name and the owner. After the Product has been created a Unique Identifier Number ( UPDATEHUB_PRODUCT_UID ) is generated to identify it. This number should be added to your build in order to allow the UpdateHub agent, which runs inside the target device, to communicate with the UpdateHub Cloud . For convenience, you can add the UPDATEHUB_PRODUCT_UID to your build/conf/local.conf configuration file when prototyping. As this is a information that will be permanent for the whole product life cycle, it should be put inside your distribution configuration file or image recipe. After you press the OK button you will be into the Products screen where you can see all your Product , Rollouts , Devices and Packages . If you make changes in your product and send this changes to your UpdateHub the package will appear in the Package List .","title":"How to create a product"},{"location":"updatehub-cloud/product/#viewing-the-details-of-a-product","text":"When you access the Dashboard the Products you have created or have access to are displayed in a list. The page appears as shown below: Clicking on any product card, you will be taken to the Product Overview page. In this page you find useful information about the Product , as which Devices you have deployed on the field, the two last Packages sent for that particular Product and the Rollouts status. In case you didn't copy the Product Unique Identifier Number in the moment that you create it on the UpdateHub Cloud don't worry. To get access to this information again you must click on the Product icon and the Unique Identifier Number will be shown to you.","title":"Viewing the details of a product"},{"location":"yocto-project/glossary/","text":"Glossary of variables \u00b6 UPDATEHUB_PRODUCT_UID \u00b6 Identifies the product id in use. This is used by rollouts. UPDATEHUB_UHUPKG_PUBLIC_KEY / UPDATEHUB_UHUPKG_PRIVATE_KEY \u00b6 The variables are required to point to the keys which are used to validate and sign the update package. The keys may or not be stored on the layer. Commonly the keys are not available for developers and passed to the build system using the local.conf file of the autobuilder. UPDATEHUB_IMAGE_TYPE \u00b6 The updatehub can operate using different setup which can be chosen using the UPDATEHUB_IMAGE_TYPE variable. It supports different values, as below: initramfs - Enables the updatehub gold firmware support; this adds an initramfs based image which is used for the upgrade process. In this mode, the updatehub agent is ran inside an initramfs image which allows for the image to be changed without the need of a spare storage space. active/inactive - Allow the use of active and inactive images schema. This reduces the downtime of the system as the image can be change without rebooting. The new image is installed in a spare storage area and in next reboot the new image is used. The UPDATEHUB_ACTIVE_INACTIVE_BACKEND variable need to set depending of the machine requirement. UPDATEHUB_ACTIVE_INACTIVE_BACKEND \u00b6 The active and inactive image schema requires a backend to identify and choose the image to be used for next boot. It supports: 'u-boot', 'grub' or 'grub-efi'. UPDATEHUB_INSTALL_MODE \u00b6 There are multiple installation modes supported. This is usually machine dependent as it depends on the storate type in use. Supported values are: 'copy', 'flash', 'raw', 'tarball', 'ubifs' and 'imxkobs'. UPDATEHUB_FILESYSTEM_SUPPORT \u00b6 When using the 'copy' or 'tarball' installation mode, some filesystem support packages are required. This variable controls which filesystems should be supported. It supports different values, as 'btrfs', 'ext2', 'ext3', 'ext4', 'f2fs', 'jffs2', 'ubifs', 'vfat' and 'xfs'. Optional variables: \u00b6 UPDATEHUB_SERVER_URL \u00b6 Specifies the updatehub Server address to use. This is required in case you are running it inside your private cloud. UPDATEHUB_ACCESS_SECRET \u00b6 When using the uhupush task we can override the Access Id and the corresponding Secret for use. This is usually used in auto builders as they may require different credentials depending on the product being build. UPDATEHUB_CUSTOM_CA_CERTS \u00b6 Specify the CA certificate bundle to be used for uhupush task. It is currently used by UpdateHub staging server for tests but may be interesting for other users when doing custom server deployments. UPDATEHUB_DEVICE_ATTRIBUTE \u00b6 This allows more details to be added on a device. This is a very useful variable to applying filters to certain devices. Some examples of attributes: kernel cpu-model mem-total ipinfo-io. UPDATEHUB_DEVICE_IDENTITY \u00b6 This variable provides the device with an identity, making it easier to recognize each device during operations on UpdateHub Cloud. The supported values \u200b\u200bare: primary-iface : is the MAC of the primary network interface. cpuinfo-serial : It is the serial number of the processor, can be obtained with the command \"grep Serial / proc / cpuinfo\". custom : parameter that you can create. To create a customized parameter, simply put UPDATEHUB_DEVICE_IDENTITY + _ (underscore) + name such as UPDATEHUB_DEVICE_IDENTITY_updatehub-imx or UPDATEHUB_DEVICE_IDENTITY_updatehub-rpi. UPDATEHUB_PACKAGE_VERSION \u00b6 Informs the system version and is based on the Yocto Project's DISTRO_VERSION variable (the version of the distribution). UPDATEHUB_PACKAGE_VERSION_SUFFIX \u00b6 It allows adding more information at the end of the variable name. UPDATEHUB_RUNTIME_PACKAGES \u00b6 Is a variable configured to install some package in an image that supports UpdateHub, such as an boot configuration package or to install a bootscript.","title":"Glossary of variables"},{"location":"yocto-project/glossary/#glossary-of-variables","text":"","title":"Glossary of variables"},{"location":"yocto-project/glossary/#updatehub_product_uid","text":"Identifies the product id in use. This is used by rollouts.","title":"UPDATEHUB_PRODUCT_UID"},{"location":"yocto-project/glossary/#updatehub_uhupkg_public_key-updatehub_uhupkg_private_key","text":"The variables are required to point to the keys which are used to validate and sign the update package. The keys may or not be stored on the layer. Commonly the keys are not available for developers and passed to the build system using the local.conf file of the autobuilder.","title":"UPDATEHUB_UHUPKG_PUBLIC_KEY / UPDATEHUB_UHUPKG_PRIVATE_KEY"},{"location":"yocto-project/glossary/#updatehub_image_type","text":"The updatehub can operate using different setup which can be chosen using the UPDATEHUB_IMAGE_TYPE variable. It supports different values, as below: initramfs - Enables the updatehub gold firmware support; this adds an initramfs based image which is used for the upgrade process. In this mode, the updatehub agent is ran inside an initramfs image which allows for the image to be changed without the need of a spare storage space. active/inactive - Allow the use of active and inactive images schema. This reduces the downtime of the system as the image can be change without rebooting. The new image is installed in a spare storage area and in next reboot the new image is used. The UPDATEHUB_ACTIVE_INACTIVE_BACKEND variable need to set depending of the machine requirement.","title":"UPDATEHUB_IMAGE_TYPE"},{"location":"yocto-project/glossary/#updatehub_active_inactive_backend","text":"The active and inactive image schema requires a backend to identify and choose the image to be used for next boot. It supports: 'u-boot', 'grub' or 'grub-efi'.","title":"UPDATEHUB_ACTIVE_INACTIVE_BACKEND"},{"location":"yocto-project/glossary/#updatehub_install_mode","text":"There are multiple installation modes supported. This is usually machine dependent as it depends on the storate type in use. Supported values are: 'copy', 'flash', 'raw', 'tarball', 'ubifs' and 'imxkobs'.","title":"UPDATEHUB_INSTALL_MODE"},{"location":"yocto-project/glossary/#updatehub_filesystem_support","text":"When using the 'copy' or 'tarball' installation mode, some filesystem support packages are required. This variable controls which filesystems should be supported. It supports different values, as 'btrfs', 'ext2', 'ext3', 'ext4', 'f2fs', 'jffs2', 'ubifs', 'vfat' and 'xfs'.","title":"UPDATEHUB_FILESYSTEM_SUPPORT"},{"location":"yocto-project/glossary/#optional-variables","text":"","title":"Optional variables:"},{"location":"yocto-project/glossary/#updatehub_server_url","text":"Specifies the updatehub Server address to use. This is required in case you are running it inside your private cloud.","title":"UPDATEHUB_SERVER_URL"},{"location":"yocto-project/glossary/#updatehub_access_secret","text":"When using the uhupush task we can override the Access Id and the corresponding Secret for use. This is usually used in auto builders as they may require different credentials depending on the product being build.","title":"UPDATEHUB_ACCESS_SECRET"},{"location":"yocto-project/glossary/#updatehub_custom_ca_certs","text":"Specify the CA certificate bundle to be used for uhupush task. It is currently used by UpdateHub staging server for tests but may be interesting for other users when doing custom server deployments.","title":"UPDATEHUB_CUSTOM_CA_CERTS"},{"location":"yocto-project/glossary/#updatehub_device_attribute","text":"This allows more details to be added on a device. This is a very useful variable to applying filters to certain devices. Some examples of attributes: kernel cpu-model mem-total ipinfo-io.","title":"UPDATEHUB_DEVICE_ATTRIBUTE"},{"location":"yocto-project/glossary/#updatehub_device_identity","text":"This variable provides the device with an identity, making it easier to recognize each device during operations on UpdateHub Cloud. The supported values \u200b\u200bare: primary-iface : is the MAC of the primary network interface. cpuinfo-serial : It is the serial number of the processor, can be obtained with the command \"grep Serial / proc / cpuinfo\". custom : parameter that you can create. To create a customized parameter, simply put UPDATEHUB_DEVICE_IDENTITY + _ (underscore) + name such as UPDATEHUB_DEVICE_IDENTITY_updatehub-imx or UPDATEHUB_DEVICE_IDENTITY_updatehub-rpi.","title":"UPDATEHUB_DEVICE_IDENTITY"},{"location":"yocto-project/glossary/#updatehub_package_version","text":"Informs the system version and is based on the Yocto Project's DISTRO_VERSION variable (the version of the distribution).","title":"UPDATEHUB_PACKAGE_VERSION"},{"location":"yocto-project/glossary/#updatehub_package_version_suffix","text":"It allows adding more information at the end of the variable name.","title":"UPDATEHUB_PACKAGE_VERSION_SUFFIX"},{"location":"yocto-project/glossary/#updatehub_runtime_packages","text":"Is a variable configured to install some package in an image that supports UpdateHub, such as an boot configuration package or to install a bootscript.","title":"UPDATEHUB_RUNTIME_PACKAGES"},{"location":"yocto-project/yocto-project-guide/","text":"Yocto Project guide \u00b6 Here we have a guide with the necessary steps for adding UpdateHub, either in a project that already exists or in a new project. Each step provides a brief description of the process that must be performed and a link to a section with more detailed information about this process. Before you start, we ask you to check if your board is supported by UpdateHub. If your board still does not have support or you encounter difficulties we will be happy to assist you through our Gitter or contact us at contact@updatehub.io First step: adding layer \u00b6 Create project from scratch \u00b6 For the creation of a project that already has the necessary layers to support UpdateHub we recommend using the platform that will download and add the necessary layers automatically, allowing you to start your implementation quickly. Integrating onto a existing project \u00b6 In a finished or under development project, the way to integrate UpdateHub is done by adding layers directly . Second step: creating a product \u00b6 Create a Product is necessary for some variables such as the product identifier to be generated. These variables must be included in the image that will be generated so that the device has the necessary data to be authorized on the UpdateHub server when accessing it. To create a product you need to be logged into your UpdateHub Cloud account . Third step: requesting an access key \u00b6 Access key is a variable that Updatehub uses to guarantee the authenticity of a device when it requests access to the server. Generating an Access Key is easy and after just putting it in a project's settings before the image that will be loaded on the devices is generated. Just like creating a product, creating a access key takes place within the Dashboard Fourth step: configuring the variables \u00b6 Here we show how to setting up the UpdateHub variables necessary for the correct functioning of UpdateHub. Definitions of variables as well as other variables can be found in the Glossary of variables . Fifth step: in your board \u00b6 After adding the necessary layers and configuring the variables now just generate the image with the bitbake command, save the image on the target devices and that's it! Sixth step: sending a package to server \u00b6 When changes occur in the original image that is present in devices in the field, it is necessary to update these devices by sending the package with the changed image to the UpdateHub server for it to be applied. Congratulations! Your UpdateHub support is up and running. Can't run a tutorial step? Please contact us at Gitter so we can help you.","title":"Yocto Project guide"},{"location":"yocto-project/yocto-project-guide/#yocto-project-guide","text":"Here we have a guide with the necessary steps for adding UpdateHub, either in a project that already exists or in a new project. Each step provides a brief description of the process that must be performed and a link to a section with more detailed information about this process. Before you start, we ask you to check if your board is supported by UpdateHub. If your board still does not have support or you encounter difficulties we will be happy to assist you through our Gitter or contact us at contact@updatehub.io","title":"Yocto Project guide"},{"location":"yocto-project/yocto-project-guide/#first-step-adding-layer","text":"","title":"First step: adding layer"},{"location":"yocto-project/yocto-project-guide/#create-project-from-scratch","text":"For the creation of a project that already has the necessary layers to support UpdateHub we recommend using the platform that will download and add the necessary layers automatically, allowing you to start your implementation quickly.","title":"Create project from scratch"},{"location":"yocto-project/yocto-project-guide/#integrating-onto-a-existing-project","text":"In a finished or under development project, the way to integrate UpdateHub is done by adding layers directly .","title":"Integrating onto a existing project"},{"location":"yocto-project/yocto-project-guide/#second-step-creating-a-product","text":"Create a Product is necessary for some variables such as the product identifier to be generated. These variables must be included in the image that will be generated so that the device has the necessary data to be authorized on the UpdateHub server when accessing it. To create a product you need to be logged into your UpdateHub Cloud account .","title":"Second step: creating a product"},{"location":"yocto-project/yocto-project-guide/#third-step-requesting-an-access-key","text":"Access key is a variable that Updatehub uses to guarantee the authenticity of a device when it requests access to the server. Generating an Access Key is easy and after just putting it in a project's settings before the image that will be loaded on the devices is generated. Just like creating a product, creating a access key takes place within the Dashboard","title":"Third step: requesting an access key"},{"location":"yocto-project/yocto-project-guide/#fourth-step-configuring-the-variables","text":"Here we show how to setting up the UpdateHub variables necessary for the correct functioning of UpdateHub. Definitions of variables as well as other variables can be found in the Glossary of variables .","title":"Fourth step: configuring the variables"},{"location":"yocto-project/yocto-project-guide/#fifth-step-in-your-board","text":"After adding the necessary layers and configuring the variables now just generate the image with the bitbake command, save the image on the target devices and that's it!","title":"Fifth step: in your board"},{"location":"yocto-project/yocto-project-guide/#sixth-step-sending-a-package-to-server","text":"When changes occur in the original image that is present in devices in the field, it is necessary to update these devices by sending the package with the changed image to the UpdateHub server for it to be applied. Congratulations! Your UpdateHub support is up and running. Can't run a tutorial step? Please contact us at Gitter so we can help you.","title":"Sixth step: sending a package to server"},{"location":"yocto-project/yocto-project-reference/","text":"Yocto Project reference \u00b6 In this section we cover the topics that involve UpdateHub with Yocto Project such as adding UpdateHub layers, setting variables, access keys and glossary. review Supported version \u00b6 The UpdateHub offers a high quality integration for the Yocto Project and provides a ready to use support for a number of boards ( RaspberryPi , Texas Instruments e Freescale ). Every six months, a new version of Yocto Project is released. The current version is the Yocto Project 3.0, codename Zeus , and its support is provided by the meta-updatehub layer. This layer provides all the infrastructure code to enable the use of Yocto Project together with the UpdateHub . The minimal set of layers to use the UpdateHub are: Layer name Branch name poky zeus meta-openembedded/meta-oe zeus meta-openembedded/meta-python zeus meta-updatehub zeus Besides the basic support, there are many boards with UpdateHub support, provided by extra BSP integration layers, as shown at the table below: Board full name BSP layer name Machine name Branch name BeagleBone Black meta-updatehub-ti beaglebone zeus Raspberry Pi 3 meta-updatehub-raspberrypi raspberrypi3 zeus NXP i.MX6QP/Q/DL SABRE Smart Device meta-updatehub-freescale imx6qdlsabresd zeus Boundary Devices Nitrogen6X meta-updatehub-freescale nitrogen6x zeus Boundary Devices i.MX6 SABRELite meta-updatehub-freescale nitrogen6x zeus TechNexion i.MX7 PICO meta-updatehub-freescale imx7d-pico zeus Toradex Apalis iMX6Q/D meta-updatehub-freescale apalis-imx6 zeus WaRP7 meta-updatehub-freescale imx7s-warp zeus Wandboard i.MX6 QuadPlus/Quad/Dual/Solo meta-updatehub-freescale wandboard zeus If you need to use an earlier Yocto Project version, the UpdateHub is also supported. Currently, there is support for following previous Yocto Project versions: Yocto Project 2.1, codename Krogoth Yocto Project 2.2, codename Morty Yocto Project 2.3, codename Pyro Yocto Project 2.4, codename Rocko Yocto Project 2.5, codename Sumo Yocto Project 2.6, codename Thud Yocto Project 2.7, codename Warrior Yocto Project 3.0, codename Zeus These earlier versions are actively supported by the UpdateHub , but features and compatible machines may vary among them. Adding layer to your project \u00b6 The first step is initialize the environment to build a Linux image using Yocto Project . To start working with Yocto Project we need to fetch all the needed layers, that includes the poky , meta-openembedded , meta-raspberrypi , meta-updatehub and meta-updatehub-raspberrypi layers. The meta-updatehub is the layer that adds support to UpdateHub itself, and meta-updatehub-raspberrypi includes UpdateHub support for Raspberry Pi machines. In addition, we need to get the meta-openembedded layer, because UpdateHub has some dependencies, such as Python 3 packages to create the uhu utility used as UpdateHub package manager and will be covered in this guide. Here we will show you two different approaches to download the necessary layers to support UpdateHub : one using a platform which will download the necessary layers and add them automatically to the project, the other approach is to manually download and add these layers. Using UpdateHub Platform \u00b6 To get a platform you need have Repo installed. Repo is a tool that helps manage many Git repositories, uploading to revision control systems and automating parts of the development workflow. Install the repo utility: mkdir ~/bin curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo chmod a+x ~/bin/repo Download the platform source: PATH=${PATH}:~/bin mkdir updatehub-platform cd updatehub-platform repo init -u https://github.com/UpdateHub/updatehub-yocto-project-reference-platform.git -b zeus repo sync Setup the environment: source ./setup-environment build At the end of the commands you have every metadata you need to start working. Adding the layers manually \u00b6 To include the updatehub Yocto layers in your build is easy just clone the meta-updatehub layer and the machine support layer to your sources directory following the commands below: git clone https://github.com/openembedded/meta-openembedded -b zeus git clone https://github.com/UpdateHub/meta-updatehub -b zeus In /build folder of your project include: bitbake-layers add-layer ../meta-openembedded/meta-oe bitbake-layers add-layer ../meta-openembedded/meta-python bitbake-layers add-layer ../meta-openembedded/meta-networking bitbake-layers add-layer ../meta-updatehub For Raspberry Pi 3, you can do that using: git clone https://github.com/UpdateHub/meta-updatehub-raspberrypi In /build folder of your project include: bitbake-layers add-layer ../meta-updatehub-raspberrypi/ For BeagleBone Black , you can use: git clone https://github.com/UpdateHub/meta-updatehub-ti In /build folder of your project include: bitbake-layers add-layer ../meta-updatehub-ti/ And for imx6qdlsabresd , use: git clone https://github.com/UpdateHub/meta-updatehub-freescale In /build folder of your project include: bitbake-layers add-layer ../meta-updatehub-freescale/ Done! Now you have the UpdateHub layer in your project. Configurating UpdateHub variables \u00b6 You should now to include UpdateHub system variables in conf/local.conf . The variables below are the basics for the correct configuration. More details and options see Glossary of variables . UPDATEHUB_PRODUCT_UID - identifies the product id in use and this is used by rollouts. It is generate in create process ends or you get this code in UpdateHub Dashboard, in Product page. UPDATEHUB_ACCESS_ID and UPDATEHUB_ACCESS_SECRET - They can be generate in Settings available in right top of screen and are necessary for server connection. UPDATEHUB_PACKAGE_VERSION_SUFFIX - added optionally, is advised for version organization. Finally the final of your local.conf file should seem like this. UPDATEHUB_PRODUCT_UID = \"05344b71c3e9f8...\" UPDATEHUB_ACCESS_ID = \"your-email@gmail.com-8bc21121049af...\" UPDATEHUB_ACCESS_SECRET = \"9b1fcee96795fa5dea5cd04cb1d2...\" UPDATEHUB_PACKAGE_VERSION_SUFFIX = \"-test-image-1.0\" Cases of adding layers manually \u00b6 If you have used the platform, the process below is not necessary, because the platform already has updatehub-image class configured. In case you are not using the platform, in addition to the variable configuration specified above, you will need to add update-image class of UpdateHub in your project recipe for to use the setting available. For this you must include \"inherit updatehub-image\" in myproject/../my-image.bb or just to add \"updatehub-image\" in inherit if this exists. The your new image with UpdateHub support layer is ready. RSA Key \u00b6 RSA keys are asymmetric encryption keys that serve to provide greater security in communications. The UpdateHub verifies the authenticity of every Package update prior applying it. To do so, it uses a RSA key that to check if the Package has not been modified or corrupted by any means. Each device will contain the public key, public_key.pem , included on the device image, which will validate any received * Package before unpacking, which must have been signed with the private key, private_key.pem*, when generating the update package. Although these keys are not mandatory on UpdateHub, we advise their use as an additional data protection mechanism. In this session we will cover: Generating a RSA Key Setting up RSA Key Generating a RSA Key \u00b6 The generation of the RSA keys requires the openssl utility. The private RSA key is generated using the command below: mkdir -p ~/updatehub-keys openssl genpkey -algorithm RSA -out ~/updatehub-keys/private_key.pem -pkeyopt rsa_keygen_bits:4096 Next we need to extract the public RSA key from the private key. Use the following command: openssl rsa -pubout -in ~/updatehub-keys/private_key.pem -out ~/updatehub-keys/public_key.pem Setting up RSA Key \u00b6 The keys need to be enabled inside your Yocto Project build configuration, so UpdateHub can deploy the public key inside the generated image and use the private key to sign the update package. You must set the UPDATEHUB_UHUPKG_PRIVATE_KEY and UPDATEHUB_UHUPKG_PRIVATE_KEY variables inside your conf/local.conf file as seen next: UPDATEHUB_UHUPKG_PRIVATE_KEY = \"~/updatehub-keys/private_key.pem\" UPDATEHUB_UHUPKG_PUBLIC_KEY = \"~/updatehub-keys/public_key.pem\" Keep save your RSA keys Once a device is deployed using a RSA key, the same key is used to validate every update package send to this device. It is important to keep the RSA keys safe or you'll not be able to send updates for those devices. Pushing an update package \u00b6 The UpdateHub works with upkg format for update package, and this is generated by the uhu . Update Utilities or uhu is an interactive prompt and a command line utility to manage update packages for UpdateHub agent and will provide you few new BitBake tasks, like this: uhupush : sends the update package to the UpdateHub Cloud. The generation of an update package is very simple. After the integration of the UpdateHub with your Yocto Project build is complete, the Bitbake tool can be used to generate and upload the update package. The following command does all the needed work in order to push the packages to the UpdateHub Cloud: bitbake <image> -c uhupush After running this, the UpdateHub Cloud will display that there is a new Package to update the Devices and you may start a Rollout through the interface. For more details or uhu install access UpdateHub Utilities .","title":"Yocto Project reference"},{"location":"yocto-project/yocto-project-reference/#yocto-project-reference","text":"In this section we cover the topics that involve UpdateHub with Yocto Project such as adding UpdateHub layers, setting variables, access keys and glossary. review","title":"Yocto Project reference"},{"location":"yocto-project/yocto-project-reference/#supported-version","text":"The UpdateHub offers a high quality integration for the Yocto Project and provides a ready to use support for a number of boards ( RaspberryPi , Texas Instruments e Freescale ). Every six months, a new version of Yocto Project is released. The current version is the Yocto Project 3.0, codename Zeus , and its support is provided by the meta-updatehub layer. This layer provides all the infrastructure code to enable the use of Yocto Project together with the UpdateHub . The minimal set of layers to use the UpdateHub are: Layer name Branch name poky zeus meta-openembedded/meta-oe zeus meta-openembedded/meta-python zeus meta-updatehub zeus Besides the basic support, there are many boards with UpdateHub support, provided by extra BSP integration layers, as shown at the table below: Board full name BSP layer name Machine name Branch name BeagleBone Black meta-updatehub-ti beaglebone zeus Raspberry Pi 3 meta-updatehub-raspberrypi raspberrypi3 zeus NXP i.MX6QP/Q/DL SABRE Smart Device meta-updatehub-freescale imx6qdlsabresd zeus Boundary Devices Nitrogen6X meta-updatehub-freescale nitrogen6x zeus Boundary Devices i.MX6 SABRELite meta-updatehub-freescale nitrogen6x zeus TechNexion i.MX7 PICO meta-updatehub-freescale imx7d-pico zeus Toradex Apalis iMX6Q/D meta-updatehub-freescale apalis-imx6 zeus WaRP7 meta-updatehub-freescale imx7s-warp zeus Wandboard i.MX6 QuadPlus/Quad/Dual/Solo meta-updatehub-freescale wandboard zeus If you need to use an earlier Yocto Project version, the UpdateHub is also supported. Currently, there is support for following previous Yocto Project versions: Yocto Project 2.1, codename Krogoth Yocto Project 2.2, codename Morty Yocto Project 2.3, codename Pyro Yocto Project 2.4, codename Rocko Yocto Project 2.5, codename Sumo Yocto Project 2.6, codename Thud Yocto Project 2.7, codename Warrior Yocto Project 3.0, codename Zeus These earlier versions are actively supported by the UpdateHub , but features and compatible machines may vary among them.","title":"Supported version"},{"location":"yocto-project/yocto-project-reference/#adding-layer-to-your-project","text":"The first step is initialize the environment to build a Linux image using Yocto Project . To start working with Yocto Project we need to fetch all the needed layers, that includes the poky , meta-openembedded , meta-raspberrypi , meta-updatehub and meta-updatehub-raspberrypi layers. The meta-updatehub is the layer that adds support to UpdateHub itself, and meta-updatehub-raspberrypi includes UpdateHub support for Raspberry Pi machines. In addition, we need to get the meta-openembedded layer, because UpdateHub has some dependencies, such as Python 3 packages to create the uhu utility used as UpdateHub package manager and will be covered in this guide. Here we will show you two different approaches to download the necessary layers to support UpdateHub : one using a platform which will download the necessary layers and add them automatically to the project, the other approach is to manually download and add these layers.","title":"Adding layer to your project"},{"location":"yocto-project/yocto-project-reference/#using-updatehub-platform","text":"To get a platform you need have Repo installed. Repo is a tool that helps manage many Git repositories, uploading to revision control systems and automating parts of the development workflow. Install the repo utility: mkdir ~/bin curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo chmod a+x ~/bin/repo Download the platform source: PATH=${PATH}:~/bin mkdir updatehub-platform cd updatehub-platform repo init -u https://github.com/UpdateHub/updatehub-yocto-project-reference-platform.git -b zeus repo sync Setup the environment: source ./setup-environment build At the end of the commands you have every metadata you need to start working.","title":"Using UpdateHub Platform"},{"location":"yocto-project/yocto-project-reference/#adding-the-layers-manually","text":"To include the updatehub Yocto layers in your build is easy just clone the meta-updatehub layer and the machine support layer to your sources directory following the commands below: git clone https://github.com/openembedded/meta-openembedded -b zeus git clone https://github.com/UpdateHub/meta-updatehub -b zeus In /build folder of your project include: bitbake-layers add-layer ../meta-openembedded/meta-oe bitbake-layers add-layer ../meta-openembedded/meta-python bitbake-layers add-layer ../meta-openembedded/meta-networking bitbake-layers add-layer ../meta-updatehub For Raspberry Pi 3, you can do that using: git clone https://github.com/UpdateHub/meta-updatehub-raspberrypi In /build folder of your project include: bitbake-layers add-layer ../meta-updatehub-raspberrypi/ For BeagleBone Black , you can use: git clone https://github.com/UpdateHub/meta-updatehub-ti In /build folder of your project include: bitbake-layers add-layer ../meta-updatehub-ti/ And for imx6qdlsabresd , use: git clone https://github.com/UpdateHub/meta-updatehub-freescale In /build folder of your project include: bitbake-layers add-layer ../meta-updatehub-freescale/ Done! Now you have the UpdateHub layer in your project.","title":"Adding the layers manually"},{"location":"yocto-project/yocto-project-reference/#configurating-updatehub-variables","text":"You should now to include UpdateHub system variables in conf/local.conf . The variables below are the basics for the correct configuration. More details and options see Glossary of variables . UPDATEHUB_PRODUCT_UID - identifies the product id in use and this is used by rollouts. It is generate in create process ends or you get this code in UpdateHub Dashboard, in Product page. UPDATEHUB_ACCESS_ID and UPDATEHUB_ACCESS_SECRET - They can be generate in Settings available in right top of screen and are necessary for server connection. UPDATEHUB_PACKAGE_VERSION_SUFFIX - added optionally, is advised for version organization. Finally the final of your local.conf file should seem like this. UPDATEHUB_PRODUCT_UID = \"05344b71c3e9f8...\" UPDATEHUB_ACCESS_ID = \"your-email@gmail.com-8bc21121049af...\" UPDATEHUB_ACCESS_SECRET = \"9b1fcee96795fa5dea5cd04cb1d2...\" UPDATEHUB_PACKAGE_VERSION_SUFFIX = \"-test-image-1.0\"","title":"Configurating UpdateHub variables"},{"location":"yocto-project/yocto-project-reference/#cases-of-adding-layers-manually","text":"If you have used the platform, the process below is not necessary, because the platform already has updatehub-image class configured. In case you are not using the platform, in addition to the variable configuration specified above, you will need to add update-image class of UpdateHub in your project recipe for to use the setting available. For this you must include \"inherit updatehub-image\" in myproject/../my-image.bb or just to add \"updatehub-image\" in inherit if this exists. The your new image with UpdateHub support layer is ready.","title":"Cases of adding layers manually"},{"location":"yocto-project/yocto-project-reference/#rsa-key","text":"RSA keys are asymmetric encryption keys that serve to provide greater security in communications. The UpdateHub verifies the authenticity of every Package update prior applying it. To do so, it uses a RSA key that to check if the Package has not been modified or corrupted by any means. Each device will contain the public key, public_key.pem , included on the device image, which will validate any received * Package before unpacking, which must have been signed with the private key, private_key.pem*, when generating the update package. Although these keys are not mandatory on UpdateHub, we advise their use as an additional data protection mechanism. In this session we will cover: Generating a RSA Key Setting up RSA Key","title":"RSA Key"},{"location":"yocto-project/yocto-project-reference/#generating-a-rsa-key","text":"The generation of the RSA keys requires the openssl utility. The private RSA key is generated using the command below: mkdir -p ~/updatehub-keys openssl genpkey -algorithm RSA -out ~/updatehub-keys/private_key.pem -pkeyopt rsa_keygen_bits:4096 Next we need to extract the public RSA key from the private key. Use the following command: openssl rsa -pubout -in ~/updatehub-keys/private_key.pem -out ~/updatehub-keys/public_key.pem","title":"Generating a RSA Key"},{"location":"yocto-project/yocto-project-reference/#setting-up-rsa-key","text":"The keys need to be enabled inside your Yocto Project build configuration, so UpdateHub can deploy the public key inside the generated image and use the private key to sign the update package. You must set the UPDATEHUB_UHUPKG_PRIVATE_KEY and UPDATEHUB_UHUPKG_PRIVATE_KEY variables inside your conf/local.conf file as seen next: UPDATEHUB_UHUPKG_PRIVATE_KEY = \"~/updatehub-keys/private_key.pem\" UPDATEHUB_UHUPKG_PUBLIC_KEY = \"~/updatehub-keys/public_key.pem\" Keep save your RSA keys Once a device is deployed using a RSA key, the same key is used to validate every update package send to this device. It is important to keep the RSA keys safe or you'll not be able to send updates for those devices.","title":"Setting up RSA Key"},{"location":"yocto-project/yocto-project-reference/#pushing-an-update-package","text":"The UpdateHub works with upkg format for update package, and this is generated by the uhu . Update Utilities or uhu is an interactive prompt and a command line utility to manage update packages for UpdateHub agent and will provide you few new BitBake tasks, like this: uhupush : sends the update package to the UpdateHub Cloud. The generation of an update package is very simple. After the integration of the UpdateHub with your Yocto Project build is complete, the Bitbake tool can be used to generate and upload the update package. The following command does all the needed work in order to push the packages to the UpdateHub Cloud: bitbake <image> -c uhupush After running this, the UpdateHub Cloud will display that there is a new Package to update the Devices and you may start a Rollout through the interface. For more details or uhu install access UpdateHub Utilities .","title":"Pushing an update package"}]}